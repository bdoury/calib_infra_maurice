%====================== estimationwithFB.m ===============================
% Program evaluates some parameters from the signals
% located in the directory directorysignals.
% The signals correspond to the pair of sensors
% SUT/SREF during a given duration T, typically 48 hours.
%
% The evaluated parameters consist of the ratios, the STDs, etc
% They are obtained by averaging on the period T.
% They are saved in directoryresults.
%=========================================================================
%
%==================== Warning ===============
% we have observed huge outliers/problems in the following files:
% ihc==1, date==2015/08/09 , shift between the 2 signals for the full
% duration
% ihc==1, date==2015/10/07 ,from sample index 2.4e6
% ihc==1, date==2015/10/09 ,from sample index 2.4e6
% ihc==2, date==2015/08/07 ,from sample index 2.4e6
% ihc==2, date==2015/10/05 ,from sample index 2.4e6
% ihc==5, date==2015/10/05
% ihc==6, date==2015/10/07
% ihc==8, date==2015/10/07 , from sample index 2.5e6
% in this version we remove them
%
%=========================================================================

clear
addpath ZZtoolbox/
%=====================
load onefilest1file20.mat
%=====================
MSCthreshold     = 0.98;
FLAGsavesmall    = 1;
Fs_Hz            = 20;
nbfrequenciesbyband    = 20;

%==== List of inputs to the developper
% - filter.num and .den 
% - allfreqsinfilter_Hz
% - Fs_Hz
% - the signals (signals_centered variable in the following)

%=====================
%=== directory of input signals
directorysignals    = '../../../AAdataI26calib/';
%=== directory of output results (huge records)
% if FLAGsavesmall=1
directoryresults    = sprintf('AAresultsLite%i',fix(MSCthreshold*100));

%============== load the filter bank characteristics =====================
%  the useful variable is FILTERCHARACT
%======
% if generated by geneFB.m, use LOAD; if it is a .m program use RUN
% filtercharactfilename = 'filtercharacteristics/filtercharacteristics';
%cmdloadfilter        = sprintf('load(''%s'')',filtercharactfilename);
filtercharactfilename = 'filtercharacteristics/filtercharacteristics1.m';
cmdloadfilter         = sprintf('run(''%s'')',filtercharactfilename);
eval(cmdloadfilter);
%=====================
Pfilter                = length(filtercharact);
filterbank             = cell(Pfilter,1);
allfreqsinfilters_Hz   = zeros(nbfrequenciesbyband,Pfilter);
windshape              = cell(Pfilter,1);
for ifilter = 1:Pfilter
    flow    = filtercharact(ifilter).Wlow_Hz/Fs_Hz;
    fhigh   = filtercharact(ifilter).Whigh_Hz/Fs_Hz;
    fname   = filtercharact(ifilter).designname;
    forder  = filtercharact(ifilter).Norder;
    allfreqsinfilters_Hz(:,ifilter) = linspace( ...
        filtercharact(ifilter).Wlow_Hz,...
        filtercharact(ifilter).Whigh_Hz,...
        nbfrequenciesbyband);
    switch fname
        case 'fir1'
            fdesign = sprintf('filnum = %s(%i,[%5.8f,%5.8f]);',...
                fname,forder,2*flow,2*fhigh);
            filden = 1;
        case 'butter'
            fdesign = sprintf('[filnum,filden] = %s(%i,[%5.8f %5.8f]);',...
                fname,forder,2*flow,2*fhigh);
        case 'cheby1'
            fdesign = sprintf('[filnum,filden] = %s(%i,%i,[%5.8f %5.8f]);',...
                fname,forder,0.02,2*flow,2*fhigh);
    end
    windowshapename = filtercharact(ifilter).windowshape;
    SCPperiod_sec   = filtercharact(ifilter).SCPperiod_sec;
    ratioDFT2SCP    = filtercharact(ifilter).ratioDFT2SCP;
    lengthDFT       = fix(SCPperiod_sec*Fs_Hz/ratioDFT2SCP);
    
    switch windowshapename
        case 'hann'
            windshape{ifilter} = hann(lengthDFT,'periodic');
            windshape{ifilter} = windshape{ifilter} / sqrt(sum(windshape{ifilter} .^2));
    end
    eval(fdesign);
    filterbank{ifilter}.num = filnum;
    filterbank{ifilter}.den = filden;
end


ihc   = 1;
%===================== read data =========================
fileswithdotmat    = dir(sprintf('%ss%i/s%iy*.mat',...
    directorysignals,ihc,ihc));
nbmats             = length(fileswithdotmat);
ifile              = input(sprintf('select a number between 1 and %i : ',nbmats));

%====== Useful evaluated parameters for general purposes
allfrqsPfilters              = zeros(Pfilter*nbfrequenciesbyband,1);
allRatioSupPfilters          = zeros(Pfilter*nbfrequenciesbyband,1);
allSTDmodRatioSupPfilters    = zeros(Pfilter*nbfrequenciesbyband,1);
allSTDphaseRatioSupPfilters  = zeros(Pfilter*nbfrequenciesbyband,1);

allmeanMSCcstPfilters        = zeros(Pfilter*nbfrequenciesbyband,1);
nbofvaluesoverthreshold      = zeros(Pfilter*nbfrequenciesbyband,1);
%==================================================
fullfilename_i      = fileswithdotmat(ifile).name;
dotlocation         = strfind(fullfilename_i,'.');
underscorelocation  = strfind(fullfilename_i,'_');
filenameonly        = fullfilename_i(...
    setdiff(1:dotlocation-1,...
    underscorelocation));
commandload         = sprintf('load %ss%i/%s',...
    directorysignals,ihc,fullfilename_i);
eval(commandload)

Ntotal = size(signals_centered,1);

date_i = sprintf('%s/%s/%s',fullfilename_i(7:10),...
    fullfilename_i(16:17),fullfilename_i(21:22));

%============================================
%============================================
% filtering the signals
%============================================
[Nsignals,nbsignals] = size(signals_centered);
sigout               = zeros(Nsignals,nbsignals,Pfilter);
L_ifilter  = zeros(Pfilter,1);
allfrq_aux = cell(Pfilter,1);
EXPV       = cell(Pfilter,1);

for ifilter = 1:Pfilter
    filnum = filterbank{ifilter}.num;
    filden = filterbank{ifilter}.den;
    sigout(:,:,ifilter) = filter(filnum,filden,signals_centered);
    L_ifilter(ifilter)  = length([frqs_Hz{ifilter}]);
    allfrq_aux{ifilter} = frqs_Hz{ifilter}(1:L_ifilter(ifilter))'/Fs_Hz;
    SCPperiod_sec   = filtercharact(ifilter).SCPperiod_sec;
    ratioDFT2SCP    = filtercharact(ifilter).ratioDFT2SCP;
    lengthDFT       = fix(SCPperiod_sec*Fs_Hz/ratioDFT2SCP);
    DFTindex        = (0:lengthDFT-1)';
    EXPV{ifilter}   = exp(-2j*pi*DFTindex*allfrq_aux{ifilter});
end
%============================================
%============================================
% in each band we perform DFTs then SCPs
tabRsup    = cell(Pfilter,1);
tabR1122   = cell(Pfilter,1);
tabMSC     = cell(Pfilter,1);

for ifilter = 1:Pfilter
    SCPperiod_sec   = filtercharact(ifilter).SCPperiod_sec;
    ratioDFT2SCP    = filtercharact(ifilter).ratioDFT2SCP;
    overlapDFT      = filtercharact(ifilter).overlapDFT;
    % Computation
    lengthDFT       = fix(SCPperiod_sec*Fs_Hz/ratioDFT2SCP);
    lengthSCP       = fix(SCPperiod_sec*Fs_Hz);
    DFTshift        = fix((1-overlapDFT)*lengthDFT);
    NSCPwindows     = fix(Nsignals/Fs_Hz/SCPperiod_sec);
    sigauxW         = zeros(lengthDFT,2);
    DFTindex        = (0:lengthDFT-1)';
    
    SCP_ifreq11     = zeros(L_ifilter(ifilter),NSCPwindows-1);
    SCP_ifreq22     = zeros(L_ifilter(ifilter),NSCPwindows-1);
    SCP_ifreq12     = zeros(L_ifilter(ifilter),NSCPwindows-1);

    for iwindowSCP  = 1:NSCPwindows-1
        id0   = (iwindowSCP-1)*lengthSCP;
        id1   = 0;
        cpDFT = 0;
        while id1<id0+lengthSCP-lengthDFT
            cpDFT  = cpDFT+1;
            id1    = id0 + (cpDFT-1)*DFTshift+1;
            id2    = id1+lengthDFT-1;
            sigaux = squeeze(sigout(id1:id2,:,ifilter));
            sigauxW(:,1) = sigaux(:,1) .* windshape{ifilter};
            sigauxW(:,2) = sigaux(:,2) .* windshape{ifilter};
            for ifreq = 1:L_ifilter(ifilter)
                X_ifreq1 = sum(sigauxW(:,1) .* EXPV{ifilter}(:,ifreq));
                X_ifreq2 = sum(sigauxW(:,2) .* EXPV{ifilter}(:,ifreq));
                SCP_ifreq11(ifreq,iwindowSCP) = SCP_ifreq11(ifreq,iwindowSCP) + ...
                    X_ifreq1 .* conj(X_ifreq1);
                SCP_ifreq22(ifreq,iwindowSCP) = SCP_ifreq22(ifreq,iwindowSCP) + ...
                    X_ifreq2 .* conj(X_ifreq2);
                SCP_ifreq12(ifreq,iwindowSCP) = SCP_ifreq12(ifreq,iwindowSCP) + ...
                    conj(X_ifreq1) .* (X_ifreq2);
            end
        end
    end
    tabMSC_ifilter   = (abs(SCP_ifreq12) .^2) ./ ...
        (SCP_ifreq11 .* SCP_ifreq22);
    ind_ifilter = (tabMSC_ifilter>MSCthreshold);
    tabMSC_ifilter_cst = NaN(size(tabMSC_ifilter));
    tabMSC_ifilter_cst(ind_ifilter) = ...
        tabMSC_ifilter(ind_ifilter);
    tabMSC{ifilter}  = tabMSC_ifilter_cst;

    tabRsup_ifilter  = SCP_ifreq11 ./ conj(SCP_ifreq12);
    tabRsup_ifilter_cst = NaN(size(tabRsup_ifilter));
    tabRsup_ifilter_cst(ind_ifilter) = ...
        tabRsup_ifilter(ind_ifilter);
    tabRsup{ifilter} = tabRsup_ifilter_cst;

    SCP_ifreq11_cst   = NaN(size(SCP_ifreq11));
    SCP_ifreq11_cst(ind_ifilter) = SCP_ifreq11(ind_ifilter);
    SCP_ifreq22_cst   = NaN(size(SCP_ifreq22));
    SCP_ifreq22_cst(ind_ifilter) = SCP_ifreq22(ind_ifilter);
    
    tabR1122_cst      = SCP_ifreq11_cst ./ SCP_ifreq22_cst;
    tabR1122{ifilter} = tabR1122_cst;
end

R = cell(Pfilter,1);
for  ifilter = 1:Pfilter
    tabMSC_ifilter   = tabMSC{ifilter};
    tabRsup_ifilter  = tabRsup{ifilter};
    tabR1122_ifilter = tabR1122{ifilter};
    
    weightMSCsupeta  = (tabMSC_ifilter .^2) ./  ...
        (1-tabMSC_ifilter) .* tabR1122_ifilter;
    
    R{ifilter} = nansum(tabRsup_ifilter .* weightMSCsupeta,2) ...
        ./ nansum(weightMSCsupeta,2);
end
allfreqslin = reshape(allfreqsinfilters_Hz,nbfrequenciesbyband*Pfilter,1);
Rlinonfrq=[];
for ip=1:Pfilter
    Rlinonfrq = [Rlinonfrq;R{ip}];
end



load onefilest1file20.mat
loglog(abs(([Rlinonfrq allRatioSupPfilters])),'.')


%%
indtemp=1;
SCP_ifreq11(1:L_ifilter(6),indtemp) ./ SUTs(6).SCP(indtemp).UU(idipinf(6):idipsup(6))
SCP_ifreq22(1:L_ifilter(6),indtemp) ./ SUTs(6).SCP(indtemp).RR(idipinf(6):idipsup(6))
% SCP_ifreq12(1:L_ifilter(6),indtemp) ./ SUTs(6).SCP(indtemp).UR(idipinf(6):idipsup(6))


% Rsup/Rlin [nbfrequenciesbyband*Pfilter]
% allfreqlin (Hz) [nbfrequenciesbyband*Pfilter]
% nbofvaluesoverthreshold [nbfrequenciesbyband*Pfilter]
% MSC [nbfrequenciesbyband*Pfilter]
% CI/variance [nbfrequenciesbyband*Pfilter]
% all inputs

