%====================== estimationwithFB.m ===============================
% ihc==1, date==2015/10/07 ,from sample index 2.4e6
% ihc==1, date==2015/10/09 ,from sample index 2.4e6
% ihc==2, date==2015/08/07 ,from sample index 2.4e6
% ihc==2, date==2015/10/05 ,from sample index 2.4e6
% ihc==2, date==2015/10/13 ,from sample index 2.4e6
% ihc==5, date==2015/10/05
% ihc==6, date==2015/10/07
% ihc==8, date==2015/10/07 , from sample index 2.5e6

%============ Warning =======================
%============================================
%============================================
% %== some manual checks
% if and(ihc==1,date_i=='2015/10/07')
%     signals_centered = signals_centered(0.6e6:2.2e6,:);
% end
% if and(ihc==1,date_i=='2015/10/09')
%     signals_centered = signals_centered(0.6e6:Ntotal,:);
% end
% if and(ihc==2,date_i=='2015/08/07')
%     signals_centered = signals_centered(1:2.4e6,:);
% end
% if and(ihc==2,date_i=='2015/10/05')
%     signals_centered = ...
%         signals_centered([1:0.5e6 1e6:Ntotal],:);
% end
% if and(ihc==2,date_i=='2015/10/13')
%     signals_centered = ...
%         signals_centered([1e6:2.2e6 2.3e6:Ntotal],:);
% end
%
% if and(ihc==5,date_i=='2015/10/05')
%     signals_centered = signals_centered(1:2.4e6,:);
% end
%
% if and(ihc==6,date_i=='2015/10/07')
%     signals_centered = signals_centered(1:2.14e6,:);
% end
%
% if and(ihc==8,date_i=='2015/10/07')
%     signals_centered = signals_centered(1:2.5e6,:);
% end
%=========================================================================
% used function
%     - fbankanalysis.m
%
%=========================================================================
clear
allcolors = ['b.';'r.';'m.';'c.';'g.';'k.';'rx';'yx';'mx';'rx';'kx';...
    'c.';'k.';'r.';'c.';'m.';'g.';'b.';'k.';'r.';'c.';'m.';'g.';'k.'];
%=====================
ihc         = 2;
problemdescription.selectdate  = '2015/10/13';
problemdescription.values(:,1) = [7.4e5 8.4e5];
problemdescription.values(:,2) = [2.262e6 2.27e6];
nbproblems = size(problemdescription.values,2);

%=====================
MSCthreshold = 0.98;
%=====================
FLAGprint = 0;

addpath ZZtoolbox/

%=== directory of input signals
directorysignals    = '../../../AAdataI26calib/';

%============== load the filter bank characteristics =====================
%  the useful variable is FILTERCHARACT
%======
% if generated by geneFB.m, use LOAD; if it is a .m program use RUN
% filtercharactfilename = 'filtercharacteristics/filtercharacteristics';
%cmdloadfilter        = sprintf('load(''%s'')',filtercharactfilename);
filtercharactfilename = 'filtercharacteristics/filtercharacteristics1.m';
cmdloadfilter         = sprintf('run(''%s'')',filtercharactfilename);
eval(cmdloadfilter);
Pfilter               = length(filtercharact);
%===================== read data =========================
fileswithdotmat              = dir(sprintf('%ss%i/s%iy*.mat',...
    directorysignals,ihc,ihc));
nbmats                       = length(fileswithdotmat);
flagnofile_i = 1;
for ifile=1:nbmats
    fullfilename_i      = fileswithdotmat(ifile).name;
    dotlocation         = strfind(fullfilename_i,'.');
    underscorelocation  = strfind(fullfilename_i,'_');
    filenameonly        = fullfilename_i(...
        setdiff(1:dotlocation-1,...
        underscorelocation));
    date_i = sprintf('%s/%s/%s',fullfilename_i(7:10),...
        fullfilename_i(16:17),fullfilename_i(21:22));
    if strcmp(date_i,problemdescription.selectdate)
        flagnofile_i = 0;
        ifile_select = ifile;
        fullfilename_select = fullfilename_i;
    end
end
if flagnofile_i
    return
end
%==================================================

commandload         = sprintf('load %ss%i/%s',...
    directorysignals,ihc,fullfilename_select);
eval(commandload)
Ts_sec = 1/Fs_Hz;
Ntotal = size(signals_centered,1);
signals_centered_ii = signals_centered;
indexsupp = [];

for i_problem = 1:nbproblems+1
    tic
    allfrqsPfilters              = zeros(10000,1);
    allRatioSupPfilters          = zeros(10000,1);
    allSTDmodRatioSupPfilters    = zeros(10000,1);
    allSTDphaseRatioSupPfilters  = zeros(10000,1);
    
    allRatioInfPfilters          = zeros(10000,1);
    allSTDmodRatioInfPfilters    = zeros(10000,1);
    allSTDphaseRatioInfPfilters  = zeros(10000,1);
    allmeanMSCcstPfilters        = zeros(10000,1);
    nbofvaluesoverthreshold      = zeros(10000,1);
    allScpPfilters               = zeros(3,10000);

    %============================================
    [SUTs, filteredsignals, allfrqsFFT_Hz, ...
        alltimes_sec, filterbank] = ...
        fbankanalysis(signals_centered_ii,...
        filtercharact,Fs_Hz,MSCthreshold);
    %============================================
    % These 3 following quantities do not depend on the
    % index ifile. Therefore they could be performed
    % outside of the loop on ifile. Indeed
    % SUTs(ip).indexinsidefreqband can be performed outside
    % of the function fbankanalysis.m
    idipinf       = zeros(Pfilter,1);
    idipsup       = zeros(Pfilter,1);
    cumsumnbfq_ip = zeros(Pfilter,2);
    id1     = 1;
    for ip=1:Pfilter
        cumsumnbfq_ip(ip,1) = id1;
        idipinf(ip) = SUTs(ip).indexinsidefreqband(1);
        idipsup(ip) = SUTs(ip).indexinsidefreqband(2);
        id2         = id1+(idipsup(ip)-idipinf(ip));
        cumsumnbfq_ip(ip,2) = id2;
        id1         = id2+1;
    end
    %======
    for ip=1:Pfilter
        id1               = cumsumnbfq_ip(ip,1);
        id2               = cumsumnbfq_ip(ip,2);
        allRatioSupPfilters(id1:id2) = ...
            SUTs(ip).estimRsup.modcst(idipinf(ip):idipsup(ip)) .* ...
            exp(1i*SUTs(ip).estimRsup.phasecst(idipinf(ip):idipsup(ip)));
        allSTDmodRatioSupPfilters(id1:id2) = ...
            SUTs(ip).estimRsup.stdmodcst(idipinf(ip):idipsup(ip));
        allSTDphaseRatioSupPfilters(id1:id2) = ...
            SUTs(ip).estimRsup.stdphasecst(idipinf(ip):idipsup(ip));
        
        allRatioInfPfilters(id1:id2) = ...
            SUTs(ip).estimRinf.modcst(idipinf(ip):idipsup(ip)) .* ...
            exp(1i*SUTs(ip).estimRinf.phasecst(idipinf(ip):idipsup(ip)));
        allSTDmodRatioInfPfilters(id1:id2) = ...
            SUTs(ip).estimRinf.stdmodcst(idipinf(ip):idipsup(ip));
        allSTDphaseRatioInfPfilters(id1:id2) = ...
            SUTs(ip).estimRinf.stdphasecst(idipinf(ip):idipsup(ip));
        
        allmeanMSCcstPfilters(id1:id2) = ...
            nanmean(SUTs(ip).allMSCs.tabcst(idipinf(ip):idipsup(ip),:),2);
        allfrqsPfilters(id1:id2) = ...
            SUTs(ip).frqsFFT_Hz(idipinf(ip):idipsup(ip))';
        nbofvaluesoverthreshold(id1:id2) = ...
            sum(not(isnan(SUTs(ip).allMSCs.tabcst(idipinf(ip):idipsup(ip),:))),2);
        allScpPfilters(:,id1:id2) = ...
            squeeze(SUTs(ip).spectralmatrix(:,idipinf(ip):idipsup(ip)));
    end
    toc
    allRatioSupPfilters         = allRatioSupPfilters(1:id2,:);
    allSTDmodRatioSupPfilters   = allSTDmodRatioSupPfilters(1:id2,:);
    allSTDphaseRatioSupPfilters = allSTDphaseRatioSupPfilters(1:id2,:);
    
    allRatioInfPfilters         = allRatioInfPfilters(1:id2,:);
    allSTDmodRatioInfPfilters   = allSTDmodRatioInfPfilters(1:id2,:);
    allSTDphaseRatioInfPfilters = allSTDphaseRatioInfPfilters(1:id2,:);
    
    allfrqsPfilters             = allfrqsPfilters(1:id2,1);
    allmeanMSCcstPfilters       = allmeanMSCcstPfilters(1:id2,:);
    nbofvaluesoverthreshold     = nbofvaluesoverthreshold(1:id2,:);
    
    allScpPfilters              = allScpPfilters(:,1:id2,:);
    
    figure(1)
    if i_problem>1
        subplot(2,nbproblems,i_problem-1)
        plot((0:problemdescription.values(2,i_problem-1)-...
            problemdescription.values(1,i_problem-1))/Fs_Hz/60,...
            signals_centered(...
            problemdescription.values(1,i_problem-1):...
            problemdescription.values(2,i_problem-1),:));
        xlabel('minutes')
    end
    subplot(212)
    semilogx(allfrqsPfilters,abs(allRatioSupPfilters),allcolors(i_problem))
    hold on
    drawnow
    if i_problem<nbproblems+1
        indexsupp = [indexsupp ...
            problemdescription.values(1,i_problem):...
            problemdescription.values(2,i_problem)];
        indexremain = setdiff(1:Ntotal,indexsupp);
        signals_centered_ii = signals_centered(indexremain,:);
    end
end
figure(1)
subplot(212)
set(gca,'xlim',[0.01 10])
xlabel('frequency - Hz')
grid on
hold off
%==============================================================
HorizontalSize = 16;
VerticalSize   = 10;
set(gcf,'units','centimeters');
set(gcf,'paperunits','centimeters');
set(gcf,'PaperType','a3');
%         set(gcf,'position',[0 5 HorizontalSize VerticalSize]);
set(gcf,'paperposition',[0 0 HorizontalSize VerticalSize]);
set(gcf,'color', [1,1,0.92]);
set(gcf, 'InvertHardCopy', 'off');
    
if FLAGprint
end


