%====================== twodaysanalysis1.m =============================
% We plot the all values of the Rsup s.t. the MSC is above the threshold
% for differnt values of MSCthreshold. The goeal is to show that if we
% choose MSCthreshold to low, we have many values but with possible
% important bias.
%

% used function
%     - fbankanalysis.m
%
clear
allcolors = ['b.';'r.';'m.';'c.';'g.';'k.';'rx';'yx';'mx';'rx';'kx';...
    'c.';'k.';'r.';'c.';'m.';'g.';'b.';'k.';'r.';'c.';'m.';'g.';'k.'];

addpath ../ZZtoolbox/
printdirectory  = ' ../../figures/';

%==========================================================================
% the data are in a file with the name built as:
%                  sta1_Y2015_D239.mat
% meaning station number 1, year 2015, days 239 and 240
% these data have been extracted from IDC testbed
%==========================================================================

%============== load the filter bank characteristics =======================
%  the useful variable is FILTERCHARACT
%======
% if generated by geneFB.m, use LOAD; if it is a .m program use RUN
% filtercharactfilename = 'filtercharacteristics/filtercharacteristics';
% cmdloadcharact        = sprintf('load(''%s'')',filtercharactfilename);
filtercharactfilename = '../filtercharacteristics/filtercharacteristics1.m';
cmdloadcharact        = sprintf('run(''%s'')',filtercharactfilename);
%======

eval(cmdloadcharact);

Pfilter = length(filtercharact);

%=============== Warning
% we have observed huge outliers in the following files:
% ihc==2, ifile== 33, i.e. sta2_Y2015_D219.mat from sample index 2.4e6
% ihc==8, ifile==63, i.e. sta8_Y2015_D280.mat from sample index 2.5e6
% ihc==5,ifile==62
% ihc==6,ifile==63
%??????????
%=====================
directorydatafromIDC  = '../../../../AAdataI26calib/';
ihc                   = 1;%fix(5*rand)+1;
%===================== read data =========================
fileswithdotmat       = dir(sprintf('%ss%i/sta%i*.mat',...
    directorydatafromIDC,ihc,ihc));
nbmats                = length(fileswithdotmat);
ifile                 = 1;%fix(nbmats*rand)+1; %2:4,71
%=====================
allfrqsPfilters              = zeros(10000,1);
allRatioSupPfilters          = zeros(10000,1);
allSTDmodRatioSupPfilters    = zeros(10000,1);
allSTDphaseRatioSupPfilters  = zeros(10000,1);
allRatioInfPfilters          = zeros(10000,1);
allSTDmodRatioInfPfilters    = zeros(10000,1);
allSTDphaseRatioInfPfilters  = zeros(10000,1);
allmeanMSCcstPfilters        = zeros(10000,1);
nbofvaluesoverthreshold      = zeros(10000,1);

setimesC_ihc                 = zeros(1,2);
setimesH_ihc                 = zeros(1,2);
signals_centered_save_ihc    = cell(1,1);
problemHC                    = zeros(1,2);
%==================================================
fullfilename_i      = fileswithdotmat(ifile).name;
dotlocation         = strfind(fullfilename_i,'.');
underscorelocation  = strfind(fullfilename_i,'_');
filenameonly        = fullfilename_i(setdiff(1:dotlocation-1,underscorelocation));
commandload         = sprintf('load %ss%i/%s',directorydatafromIDC,ihc,fullfilename_i);
eval(commandload)

idSc = 1;
idSh = 1;
cpC  = 1;
cpH  = 1;
idWS = 1;
idWD = 1;
idT  = 1;
signals     = zeros(34560000,2);
windSpeed   = zeros(34560000,1);
temperature = zeros(34560000,1);
windDir     = zeros(34560000,1);
Lrecords    = length(records);

for ir = 1:Lrecords
    switch records{ir}.channel
        case 'BDF'
            Fs_Hz = 20;%records{ir}.Fs_Hz;
            switch records{ir}.station(4)
                case 'C'
                    if cpC==1
                        cpC=cpC+1;
                        setimesC_ihc(ifile,1) = records{ir}.stime;
                    end
                    auxC = records{ir}.etime;
                    LLC = length(records{ir}.data);
                    signalsC = [records{ir}.data];
                    signals(idSc:idSc+LLC-1,2)=signalsC;
                    idSc = idSc+LLC;
                case 'H'
                    if cpH==1
                        cpH=cpH+1;
                        setimesH_ihc(ifile,1) = records{ir}.stime;
                    end
                    auxH = records{ir}.etime;
                    LLH = length(records{ir}.data);
                    signalsH = [records{ir}.data];
                    signals(idSh:idSh+LLH-1,1)=signalsH;
                    idSh = idSh+LLH;
            end
        case 'LKO'
            LLT = length(records{ir}.data);
            temperature(idT:idT+LLT-1) = [records{ir}.data];
            idT = idT + LLT;
        case 'LWS'
            LLWS = length(records{ir}.data);
            windSpeed(idWS:idWS+LLWS-1) = [records{ir}.data];
            idWS = idWS + LLWS;
        case 'LWD'
            FsWind_Hz = records{ir}.Fs_Hz;
            LLWD = length(records{ir}.data);
            Fs_wind_Hz = records{ir}.Fs_Hz;
            windDir(idWD:idWD+LLWD-1) = [records{ir}.data];
            idWD = idWD + LLWD;
    end
end
setimesC_ihc(ifile,2) = auxC;
setimesH_ihc(ifile,2) = auxH;

if not(idSc==idSh)
    fprintf('problem with file # %i on %i\nLH = %i and LC = %i\n',ifile,ihc,idSh,idSc)
    problemHC(ifile,:) = [idSh,idSc];
end
idScMin = min([idSc, idSh]);

signals     = signals(1:idScMin-1,:);

windSpeed   = windSpeed(1:idWS-1);
windDir     = windDir(1:idWD-1);
temperature = temperature(1:idT-1);

Ts_sec = 1/Fs_Hz;
signals_centered = signals-ones(size(signals,1),1)*mean(signals);

%==================== WARNING: some manual checks ...
if and(ihc==2,ifile==33)
    signals_centered = signals_centered(1:2.4e6,:);
end
if and(ihc==2,ifile==62)
    signals_centered = signals_centered([1:0.5e6 1e6:idScMin-1],:);
end
if and(ihc==5,ifile==62)
    signals_centered = signals_centered(1:2.4e6,:);
end
if and(ihc==6,ifile==63)
    signals_centered = signals_centered(1:2.14e6,:);
end
if and(ihc==8,ifile==63)
    signals_centered = signals_centered(1:2.5e6,:);
end
%====================
signals_centered_save_ihc{ifile} = signals_centered;
%============================================
% notice that the SUTs is not saved, therefore we have only the
% last associated the laxt index which is NBMATS
listMSCth = [0.7 .8 .98];
LlistMSCth = length(listMSCth);
Rsup_im = cell(LlistMSCth,Pfilter);
Rsuptab_im = cell(LlistMSCth,Pfilter);
for im = 1:LlistMSCth
    MSCthreshold = listMSCth(im);
    [SUTs, filteredsignals, allfrqsFFT_Hz, alltimes_sec, filterbank] = ...
        fbankanalysis(signals_centered,...
        filtercharact,Fs_Hz,MSCthreshold);
    %============================================
    P       = length(SUTs);
    idipinf = zeros(P,1);
    idipsup = zeros(P,1);
    for ip=1:Pfilter
        ind1 = SUTs(ip).indexinsidefreqband(1);
        ind2 = SUTs(ip).indexinsidefreqband(2);
        Rsuptab_im{im,ip} = SUTs(ip).estimRsup.tabmodcst(ind1:ind2,:);
        Rsup_im{im,ip}   = SUTs(ip).estimRsup.modcst(ind1:ind2,:);
    end
    
end

%     id1 = 1;
%     for ip=1:P
%         id2 = id1+(idipsup(ip)-idipinf(ip));
%         allRatioSupPfilters(id1:id2,ifile) = ...
%             SUTs(ip).estimRsup.modcst(idipinf(ip):idipsup(ip)) .* ...
%             exp(1i*SUTs(ip).estimRsup.phasecst(idipinf(ip):idipsup(ip)));
%         allSTDmodRatioSupPfilters(id1:id2,ifile) = ...
%             SUTs(ip).estimRsup.stdmodcst(idipinf(ip):idipsup(ip));
%         allSTDphaseRatioSupPfilters(id1:id2,ifile) = ...
%             SUTs(ip).estimRsup.phasecst(idipinf(ip):idipsup(ip));
%
%         allRatioInfPfilters(id1:id2,ifile) = ...
%             SUTs(ip).estimRinf.modcst(idipinf(ip):idipsup(ip)) .* ...
%             exp(1i*SUTs(ip).estimRinf.phasecst(idipinf(ip):idipsup(ip)));
%         allSTDmodRatioInfPfilters(id1:id2,ifile) = ...
%             SUTs(ip).estimRinf.stdmodcst(idipinf(ip):idipsup(ip));
%         allSTDphaseRatioInfPfilters(id1:id2,ifile) = ...
%             SUTs(ip).estimRinf.phasecst(idipinf(ip):idipsup(ip));
%
%         allmeanMSCcstPfilters(id1:id2,ifile) = ...
%             nanmean(SUTs(ip).allMSCs.tabcst(idipinf(ip):idipsup(ip),:),2);
%         allfrqsPfilters(id1:id2,ifile) = ...
%             SUTs(ip).frqsFFT_Hz(idipinf(ip):idipsup(ip))';
%         nbofvaluesoverthreshold(id1:id2,ifile) = ...
%             sum(not(isnan(SUTs(ip).allMSCs.tabcst(idipinf(ip):idipsup(ip),:))),2);
%         id1 = id2+1;
%     end
%
%     allRatioSupPfilters         = allRatioSupPfilters(1:id1-1,:);
%     allSTDmodRatioSupPfilters   = allSTDmodRatioSupPfilters(1:id1-1,:);
%     allSTDphaseRatioSupPfilters = allSTDphaseRatioSupPfilters(1:id1-1,:);
%
%     allRatioInfPfilters         = allRatioInfPfilters(1:id1-1,:);
%     allSTDmodRatioInfPfilters   = allSTDmodRatioInfPfilters(1:id1-1,:);
%     allSTDphaseRatioInfPfilters = allSTDphaseRatioInfPfilters(1:id1-1,:);
%
%     allfrqsPfilters             = allfrqsPfilters(1:id1-1,1);
%     allmeanMSCcstPfilters       = allmeanMSCcstPfilters(1:id1-1,:);
%     nbofvaluesoverthreshold     = nbofvaluesoverthreshold(1:id1-1,:);
%%
for im = 1:LlistMSCth
    for ip=1:Pfilter
        subplot(LlistMSCth+1,1,im)
        ind1 = SUTs(ip).indexinsidefreqband(1);
        ind2 = SUTs(ip).indexinsidefreqband(2);
        [nbfrqs,nbtimeslots] = size([Rsup_im{im,ip}]);
        semilogx(allfrqsFFT_Hz{ip}(ind1:ind2), ([Rsuptab_im{im,ip}]),'.','color',0.7*ones(3,1))
        hold on
        semilogx(allfrqsFFT_Hz{ip}(ind1:ind2), ([Rsup_im{im,ip}]), allcolors(im,:))
        grid on
        
        set(gca,'xlim',[0.05 5])
        set(gca,'ylim',[0 1.5])
        set(gca,'xticklabel',[])
        set(gca,'ytick',[0 1 2])
        set(gca,'fontname','times','fontsize',10)
        txt1 = sprintf('Threshold = %5.2f',  listMSCth(im),...
            'fontname','times','fontsize',10);
        text(0,02,1.5,txt1)
        if im==1
            title(sprintf('sensor: %i, year: %s, day:%s, threshold = %4.2f',...
                ihc,filenameonly(6:9),filenameonly(11:13),listMSCth(im)),...
                'fontname','times','fontsize',12)
        else
            title(sprintf('threshold = %4.2f',listMSCth(im)),'fontname','times','fontsize',12)
        end
        subplot(LlistMSCth+1,1,LlistMSCth+1)
        semilogx(allfrqsFFT_Hz{ip}(ind1:ind2),([Rsup_im{im,ip}]), allcolors(im,:))
        set(gca,'ylim',[0.8 1.2])
        hold on
        grid on
        set(gca,'xlim',[0.05 5])
        xlabel('frequency - Hz','fontname','times','fontsize',12)
                set(gca,'fontname','times','fontsize',10)

    end
end
hold off
HorizontalSize = 16;
VerticalSize   = 14;
set(gcf,'units','centimeters');
set(gcf,'paperunits','centimeters');
set(gcf,'PaperType','a3');
set(gcf,'position',[0 5 HorizontalSize VerticalSize]);
set(gcf,'position',[0 5 HorizontalSize VerticalSize]);
set(gcf,'paperposition',[0 0 HorizontalSize VerticalSize]);
set(gcf,'color', [1,1,0.92]);
set(gcf, 'InvertHardCopy', 'off');

fileprint = sprintf('%s2daysonIS26SUT%iyear%sday%sdiffTH.eps',...
    printdirectory,ihc,filenameonly(6:9),filenameonly(11:13));

fileprintepscmd = sprintf('print -depsc -loose %s',fileprint);
fileeps2pdfcmd  = sprintf('!epstopdf %s',fileprint);
filermcmd       = sprintf('!rm %s',fileprint);

% 
%         eval(fileprintepscmd)
%         eval(fileeps2pdfcmd)
%         eval(filermcmd)

%============================ END =========================================